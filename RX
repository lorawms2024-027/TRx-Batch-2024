#include <LoRa.h>
#include <WiFi.h>
#include <HTTPClient.h>

// Define the pins used by the LoRa transceiver module
#define ss 5
#define rst 14
#define dio0 2

#define BAND 433E6 // 433E6 for Asia 

// Global variables to store LoRa parameters
float frequency;
int spreadingFactor;
float signalBandwidth;

// WiFi credentials
const char* ssid = "BatStateU ICT "; 
const char* password = â€œ Leading Innovations, Transforming Lives";

// Google Apps Script URL
const char* scriptURL = "https://script.google.com/macros/s/AKfycbzfOoqa-aXv68xxXumIcHN6hWErjq-Smg_aCLOaszN5-Yb9cIxftedvECgvwlo8AWN5/exec";

void startLoRA()
{
  LoRa.setPins(ss, rst, dio0); // Setup LoRa transceiver module

  int counter = 0;

  while (!LoRa.begin(BAND) && counter < 10)
  {
    Serial.print(".");
    counter++;
    delay(500);
  }
  if (counter == 10)
  {
    Serial.println("Starting LoRa failed!");
  }
  Serial.println("LoRa Initialization OK!");

  // Set spreading factor and bandwidth
  LoRa.setSpreadingFactor(7); // Set spreading factor (7-12)
  LoRa.setSignalBandwidth(125E3); // Set bandwidth (125E3, 250E3, 500E3)

  // Store LoRa parameters in global variables
  frequency = BAND;
  spreadingFactor = 7; // Change this based on the spreading factor setting
  signalBandwidth = 125E3; // Change this based on the bandwidth setting

  delay(15000);
}

void connectWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi!");
}

void sendToGoogleSheet(float rssi, float snr, float pdr, String packetData) {
  // Create JSON payload
  String payload = "{\"rssi\": " + String(rssi) + ", \"snr\": " + String(snr) + ", \"pdr\": " + String(pdr) + ", \"packet_data\": \"" + packetData + "\"}";

  // Send HTTP POST request
  HTTPClient http;
  http.begin(scriptURL);
  http.addHeader("Content-Type", "application/json");
  int httpResponseCode = http.POST(payload);
  
  // Check for redirection (302 status code)
  if (httpResponseCode == HTTP_CODE_FOUND) {
    Serial.println("Redirecting...");
    String newUrl = http.header("Location");
    http.end();
    http.begin(newUrl);
    httpResponseCode = http.POST(payload);
  }

  if (httpResponseCode > 0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
  } else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  http.end();
}

void setup()
{
  // Initialize Serial Monitor
  Serial.begin(115200);
  startLoRA();
  connectWiFi();
}

void loop()
{
  // try to parse packet
  int packetSize = LoRa.parsePacket();
  if (packetSize)
  {
    // received a packet
    Serial.print("\nReceived packet: ");

    String packetData = "";  

    // read the packet
    while (LoRa.available())
    {
      char c = (char)LoRa.read();
      Serial.print(c);
      packetData += c; // Append character to packet data string
    }

    // print RSSI and SNR of the packet
    Serial.print(" \nRSSI: ");
    float rssi = LoRa.packetRssi();
    Serial.print(rssi);

    // Calculate and print SNR
    float noiseFloor = -127; 
    float snr = rssi - noiseFloor;
    Serial.print(" \nSNR: ");
    Serial.println(snr);

    // Calculate and print PDR
    float pdr = 100.0 * (1.0 / (1.0 + exp(-0.1 * (rssi - 30.0))));
    Serial.print(" \nPDR: ");
    Serial.print(100-pdr);
    Serial.println(" %");

    // Send data to Google Sheets
    sendToGoogleSheet(rssi, snr, pdr, packetData);

    // Retrieve and print LoRa parameters
    Serial.println("\nLoRa Parameters:");
    Serial.print("F: ");
    Serial.print(frequency / 1000000);
    Serial.println(" MHz");
    Serial.print("SF: ");
    Serial.println(spreadingFactor);
    Serial.print("BW: ");
    Serial.print(signalBandwidth / 1000);   
    Serial.println(" kHz");
  }
}
